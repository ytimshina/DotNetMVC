@model IEnumerable<AuthApp.Models.CalculationHistory>

@{
    ViewData["Title"] = "Calculation History";
    // No need to set Layout here - using the conditional in _Layout.cshtml instead
}

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ERV Wheel Calculator - History</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background-color: #f0f4f8;
      color: #334155;
    }
    
    .card {
      background-color: white;
      border-radius: 0.75rem;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
      border: 1px solid rgba(226, 232, 240, 0.8);
    }
    
    .card:hover {
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.08);
    }
    
    .table-header {
      @@apply font-semibold text-gray-700 bg-gray-50 p-4 text-left;
      vertical-align: middle;
    }
    
    .table-data {
      @@apply p-4 border border-gray-200;
      vertical-align: middle;
    }
    
    .section-title {
      @@apply text-lg font-semibold mb-4 text-blue-800 border-b pb-2 border-gray-200;
      letter-spacing: -0.01em;
    }
    
    /* Animations */
    .slide-in {
      animation: slideIn 0.6s cubic-bezier(0.16, 1, 0.3, 1) forwards;
    }
    @@keyframes slideIn {
      from {
        transform: translateY(40px);
        opacity: 0;
      }
      to {
        transform: translateY(0);
        opacity: 1;
      }
    }

    /* Custom gradients for tabs */
    .cooling-header {
      background: linear-gradient(to right, #e0f2fe, #bae6fd);
      border-radius: 6px 6px 0 0;
    }
    
    .heating-header {
      background: linear-gradient(to right, #fee2e2, #fecaca);
      border-radius: 6px 6px 0 0;
    }
    
    /* For history list cards */
    .history-card {
      transition: all 0.3s ease;
    }
    
    .history-card:hover {
      transform: translateY(-3px);
      border-color: #93c5fd;
    }
    
    .calculation-card {
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.5s ease;
    }
    
    .calculation-card.active {
      max-height: 5000px; /* Arbitrary large value */
    }
    
    /* Loading spinner */
    .animate-spin {
      animation: spin 1s linear infinite;
    }
    
    @@keyframes spin {
      from {
        transform: rotate(0deg);
      }
      to {
        transform: rotate(360deg);
      }
    }
  </style>
</head>
<body class="bg-gradient-to-b from-gray-50 to-gray-100 min-h-screen">
  <!-- Page container with a max width and auto margins -->
  <div class="p-6 w-full mx-auto">
    
    <!-- Page Header -->
    <div class="mb-10 text-center">
      <h1 class="text-4xl font-bold text-blue-900 mb-3">ERV Wheel Calculation History</h1>
      <p class="text-gray-600 text-lg max-w-2xl mx-auto">View your saved energy recovery ventilation calculations</p>
      <div class="mt-4">
        <a href="/Home/Welcome" class="text-blue-600 hover:text-blue-800 font-medium">Start New Calculation</a>
      </div>
    </div>
    
    <!-- Search Bar -->
    <div class="card p-6 mb-6 shadow-md w-full mx-auto">
      <div class="relative">
        <input type="text" id="search-input" placeholder="Search by description..." 
            class="w-full p-3 pr-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-blue-500"/>
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 absolute right-3 top-3.5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
        </svg>
      </div>
    </div>
    
    <!-- Calculations List -->
    <div class="w-full mx-auto mb-10">
      @if (!Model.Any())
      {
          <div class="text-center py-12 card p-6 bg-gray-50 rounded-lg border border-gray-200">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
              </svg>
              <h3 class="text-xl font-semibold text-gray-700 mb-2">No Calculations Found</h3>
              <p class="text-gray-500 mb-6">You haven't saved any calculations yet.</p>
              <a href="/Home/Welcome" class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 shadow-md transition-all">
                  Start Your First Calculation
              </a>
          </div>
      }
      else
      {
          <div id="history-list">
              @foreach (var item in Model)
              {
                  <div class="history-card card p-5 mb-4 rounded-lg border border-gray-200 hover:shadow-lg transition-all">
                      <div class="flex justify-between items-center">
                          <div>
                              <h3 class="text-lg font-semibold text-gray-800">@item.Description</h3>
                              <p class="text-sm text-gray-500">@item.CalculationDate.ToString("MMM dd, yyyy HH:mm")</p>
                          </div>
                          <button class="toggle-details px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors" 
                                  data-id="@item.Id" 
                                  onclick="loadCalculationDetails(@item.Id, this)">
                              View Details
                          </button>
                      </div>
                      
                      <!-- Calculation Detail Container (Initially Empty) -->
                      <div id="calculation-@item.Id" class="calculation-card mt-4 pt-4 border-t border-gray-200"></div>
                  </div>
              }
          </div>
      }
    </div>
    
    <!-- Loading Indicator for AJAX calls -->
    <div id="loadingIndicator" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
      <div class="bg-white p-6 rounded-xl shadow-lg">
        <svg class="animate-spin h-10 w-10 text-blue-600 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <p class="mt-3 text-center">Loading calculation details...</p>
      </div>
    </div>
    
    <!-- Footer -->
    <div class="text-center text-gray-500 text-sm mt-12 mb-6">
      <p>Â© @DateTime.Now.Year ERV Wheel Calculator. All rights reserved.</p>
    </div>
  </div>

  <script>
    // Global to track currently open calculation
    let currentlyOpenCalculation = null;
    
    // Function to toggle calculation details
    function loadCalculationDetails(id, buttonElement) {
      const calculationDiv = document.getElementById(`calculation-${id}`);
      
      // If this calculation is already open, close it
      if (currentlyOpenCalculation === id) {
        calculationDiv.classList.remove('active');
        buttonElement.textContent = 'View Details';
        currentlyOpenCalculation = null;
        return;
      }
      
      // If another calculation is open, close it
      if (currentlyOpenCalculation !== null) {
        const previousCalc = document.getElementById(`calculation-${currentlyOpenCalculation}`);
        previousCalc.classList.remove('active');
        document.querySelector(`[data-id="${currentlyOpenCalculation}"]`).textContent = 'View Details';
      }
      
      // Show loading indicator
      const loadingIndicator = document.getElementById('loadingIndicator');
      loadingIndicator.classList.remove('hidden');
      loadingIndicator.classList.add('flex');
      
      // Fetch calculation details
      fetch(`/History/Details/${id}`)
        .then(response => {
          if (!response.ok) {
            throw new Error('Failed to load calculation details');
          }
          return response.text();
        })
        .then(html => {
          // Update the calculation div with the fetched content
          calculationDiv.innerHTML = html;
          calculationDiv.classList.add('active');
          buttonElement.textContent = 'Hide Details';
          currentlyOpenCalculation = id;
          
          // Scroll to the calculation
          calculationDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
        })
        .catch(error => {
          calculationDiv.innerHTML = `
            <div class="p-4 bg-red-100 text-red-800 rounded mb-4">
              Error: ${error.message}
            </div>
          `;
          calculationDiv.classList.add('active');
        })
        .finally(() => {
          // Hide loading indicator
          loadingIndicator.classList.add('hidden');
          loadingIndicator.classList.remove('flex');
        });
    }
    
    // Search functionality
    document.addEventListener('DOMContentLoaded', function() {
      const searchInput = document.getElementById('search-input');
      if (searchInput) {
        searchInput.addEventListener('input', function() {
          const searchTerm = this.value.toLowerCase();
          const cards = document.querySelectorAll('.history-card');
          
          cards.forEach(card => {
            const title = card.querySelector('h3').textContent.toLowerCase();
            const date = card.querySelector('p').textContent.toLowerCase();
            
            if (title.includes(searchTerm) || date.includes(searchTerm)) {
              card.style.display = 'block';
            } else {
              card.style.display = 'none';
            }
          });
        });
      }
    });
  </script>
</body>
</html>